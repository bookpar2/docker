name: bookpar2

on:
  push:
    branches:
      - main

jobs:
  backend:
    name: Deploy Django Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: SSH to EC2 and Deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}

        run: |
          # SSH 키 설정
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            set -e  # 오류 발생 시 스크립트 중단
            
            # 환경 변수 설정
            export DATABASE_URL="${{ secrets.DATABASE_URL }}"
            export DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
            export ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}"

            # 백엔드 디렉토리 이동
            cd /home/ubuntu/docker/backend

            # 최신 코드 가져오기
            git pull origin main

            # Python 가상환경 설정
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate

            # 종속성 설치
            pip install --upgrade pip
            pip install -r requirements.txt

            # .env 파일 생성 (Django 환경 변수)
            echo "DATABASE_URL=$DATABASE_URL" > .env
            echo "DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY" >> .env
            echo "ALLOWED_HOSTS=$ALLOWED_HOSTS" >> .env

            # Django 마이그레이션 실행
            python manage.py migrate

            # 정적 파일 수집
            python manage.py collectstatic --noinput

            # MySQL 실행 확인 및 시작
            if ! systemctl is-active --quiet mysql; then
              echo "Starting MySQL..."
              sudo systemctl start mysql
            fi

            # Gunicorn 실행
            sudo systemctl restart gunicorn

            # Nginx 재시작
            sudo systemctl restart nginx
          EOF

  # frontend:
  #   name: Deploy Frontend
  #   runs-on: ubuntu-latest
  #   needs: backend

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18

  #     - name: Install frontend dependencies
  #       run: |
  #         cd frontend
  #         npm install

  #     - name: Build Frontend
  #       run: |
  #         cd frontend
  #         npm run build

  #     - name: Configure AWS CLI
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_REGION: ${{ secrets.AWS_REGION }}
  #       run: |
  #         aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
  #         aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  #         aws configure set region $AWS_REGION

  #     - name: Deploy Frontend to S3
  #       run: |
  #         aws s3 sync ./frontend/build s3://your-s3-bucket-name --delete